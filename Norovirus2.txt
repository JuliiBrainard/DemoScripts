;;;extensions [r] ;; can't find r-home... will take a lot of path setting by admin-privlgd

globals
[
  average-illness-time ;; from literature, for norovirus, 46 hrs is reasonable, but tail to higher numbers
  bubble-level             ;; 8 categories will be set
  beta-n                ;; The average number of new secondary
                        ;; infections per infected this tick
  gamma                 ;; The average number of new recoveries
                        ;; per infected this tick
  infection-chance      ;; chances of infection upon each contact, but this was superseced so that TPrecs encompasses this value
  initial-people        ;; figured out ideal is 1600, on grid measuring 88x90 both xy to get 11.74 contacts/16hrs (in absence of disease circulating)
  maxill              ;; maximum ill at once
  mean-incubation-period     ;; random normal distrib around mean length
  mn-contacts-sofar     ;; mean of daily contact rate
  nb-infected-previous  ;; Number of infected people at the previous tick
  ;; pcBA                  ;; IN SLIDER default % of advice that is 'bad advice'; 50% in stages1-2, but vary sometimes in stage 3
  ;; BAimmunised%            ;; IN SLIDER, percent immunised against bad info, stage 3 models
  percent-start-infected  ;; Original model had this set at 5, could be all sorts
  r0                    ;; The number of secondary infections that arise
                        ;; due to a single infected introduced in an entirely susceptible population
  change-tp          ;; pc version & mean-tp in SLIDERs... how much change in take-precs Good or Bad Advice can cause, plus initial mean-tp ITEM2VARY
  advice                ;; 25 for bad, 75 for good, couldn't get it to be strings "G" or "B"
                        ;; the next set of items tend to be for monitoring purposes, make sure model is behaving as intended
  advice-nb             ;; should be same as hour, just trying to track if cascades are being formed, and how
  bedtimes              ;; (array/list) hours when nighttime starts
  cascade-b      ;; array/list of cascade lengths for BA
  cascade-g      ;; array/list of cascade lengths for GA
  countBwillshare        ;; count how many times GA was shared, check ratio to countGwillshare is expected (probably 4:1 target)
  countGwillshare       ;; count how many times GA was shared
  cascade-length        ;; to make model perform as expected, also stop stack overflow from calls to expose-to-advice, 19=limit how deep recursion can get/ tweets per hour
  current-cascades      ;; list of individual strand lengths (depths) for the 'current' cascade, the maximum of each list is what goes into lists cascade-b and cascade-g
  defaultwillshare      ;; avg chance any advice is shared
  s0                    ;; # initial susceptibles
  stdev-of-re-in-bubbles ;; variance of Reject-est within each bubble; plot b4 end of this routine does this need to be global to make histogram(?)
  ;; viralshedrisk          ;; the small % of infec risk that is due to the viral shedding by infectious, not voluntary, not due to behaviour choices
  willshare             ;; chances of this turtle sharing
  willsharelistb         ;; array of float numbers, probability of being shared, only for BA
]

turtles-own
[
  already-shared      ;; idea is, they already shared on this cascade, yes or no, halves willshare prob
  avg-recip           ;; average reciprocity, will be a % of total in bubble who are reciprocal in their bubble;
                      ;; comment out avg-recip & related routine = check-recip when not needed to check model performance
  contacts-sofar      ;; agent set who have encountered before
  cured?              ;; If true, the person has lived through an infection.
                      ;; They cannot be re-infected.
  homexy               ;; array with home xcor & homeycor, return here every bedtime
  BAimmunised?           ;; 0 no 1 yes
  ill?                ;; to monitor for period of active disease, when movement is restricted
  incubating?         ;; If true, person is incubating
  incubation-length   ;; How long a person has been incubating
  infectious?           ;; If true, the person is infected
  illness-length    ;; How long the person has been ill (only continues to be infectious for a while...)
  shedding-len             ;; counter of hours after illness ceases
  members-my-bubble   ;; agentset who is in bubble
  nb-infected         ;; Number of secondary infections caused by an
                      ;; infected person at the end of the tick
  nb-recovered        ;; Number of recovered people at the end of the tick
  own-bubble-group           ;; which number bubble group are they in
  reject-est          ;; 0-100%, how much they reject conventional advice, innate character, doesn't change during Go
  recovery-time       ;; Time (in hours) it takes before the person recovers from the infection
  susceptible?        ;; Tracks whether the person was initially susceptible
  take-precautions    ;; JB range 0-100%, whether they will take effective precautions, start with conformity, but changes with exposure + reject-est
  time-to-incubate    ;; time this turtle will incubate...
]

patches-own
[
  start-local-avg-rejest    ;; avg reject-est of turtles on self+8nearest
  start-local-turtles       ;; agentset of turtles on nearest 8 patches (must add to turtle on self)
]

;;;
;;; SETUP PROCEDURES
;;;

to setup
  clear-all ;; sometimes seemed like having clear-all negated settings in behaviour-space ??
  ;; random-seed -603;; see behaviourspace for how to capture random seed in runs so can make entire run replicable, using new-seed command, local vars, etc.
  set average-illness-time 46 ;; in hours, go with CDC advice = 7 days, 1 day b4 illness, up to 6d on avg after illness onset: https://www.cdc.gov/flu/about/disease/spread.htm
  set infection-chance 100 ;; not using this, REDUNDANT pandemic r0 flu = 1.47, 1.47/11.74, r0=1.47 from https://bmcinfectdis.biomedcentral.com/articles/10.1186/1471-2334-14-480... or DONTFORGET
  set initial-people 1600;  could try bigger model than did for norovirus, made the 'world' 4x bigger, but then need to check Contact Rates MAYBE THING
  set mean-incubation-period 48 ;;48h from literature but become infectious 24 hours before illness starts
  set percent-start-infected 2 ;; if too small then model stops early
  setup-people ;; all the global attributes, except BAimmunised?

  let i round BAimmunised% * initial-people / 100
  ask n-of i turtles [set BAimmunised? TRUE]

  set stdev-of-re-in-bubbles [] ;; must be global var, initialise to zero... does NOT need to be turtle-own char to plot a histogram?
  put-into-bubbles ;; DO need this when checking CR
  set advice 0
  set bedtimes [16 40]
  set cascade-b [] ;; start out with empty sets, used to monitor model performance
  set cascade-g []
  set change-tp change-tppc / 100 ;; so external slider can be in %, but interally is fraction 0-1.0
  set countBwillshare 0 ;; set these to 0 to start
  set countGwillshare 0
  set defaultwillshare 0.03;;
  set maxill 0;; initialise to zero
  set mn-contacts-sofar 0 ;; have to initialise to something, a value of zero is always wrong... so easy to edit out, need for model performance checks
  set willsharelistb []  ;; set to empty set to start
  reset-ticks
    loop [
     set bedtimes lput (last bedtimes + 24) bedtimes
    if length bedtimes > 250 [ ;; was 100 days long for norov but make it up to 250 d longer here, longer duration of infectious illnes, therefore circulating
      stop] ] ;; print bedtimes ... have to have this at end of routine or breaks routine
 end


to setup-people
  create-turtles initial-people
  [
    set already-shared 0
    set BAimmunised? FALSE
    set contacts-sofar self
    set cured? false
    set shedding-len 0
    set ill? false
    set illness-length 0.0
    set incubating? false
    set incubation-length 0.0
    set infectious? false
    ;; alternative: ask n-of initial-people ;; with next line, could vary for natural resistance
    set susceptible? true

    ;; mean value of take-precs determined by using the infec. rate that was derived from the typical outbreak r0=1.9...
    set take-precautions random-normal mean-tp (mean-tp / 4 ) ;;
    set take-precautions take-precautions / 100 ; so can use %s in model setting, but operationally, use 0-1.0 range
    set time-to-incubate random-normal mean-incubation-period (mean-incubation-period / 4)
    ;; this is incubation time before becoming ill; incubation time to become infectious is this - 24h

    set shape "person"
    set color white
    set members-my-bubble [nobody]

    ;; Set the recovery time for each agent to fall on a gamma distribution around average recovery time
    set recovery-time random-gamma (0.4 * average-illness-time ) 0.4 ;; SHOULD BE about 46 hrs, still infectious for 2 days after illness stops

    ;; make sure none below 0
    if recovery-time < 0 [set recovery-time 0]

    ;; set boundaries on values
    if take-precautions > 1.0 [set take-precautions 1.0]
    if take-precautions < 0 [set take-precautions 0.01] ;; probably not necessary

    ;; Each individual has a x% chance of starting out infected.
    ;; To mimic true KM conditions use "ask one-of turtles" instead.
    if (random-float 100 < percent-start-infected) ;; Turn this off, though, when testing that contact-rate target is met in no disease model DONTFORGET
    [
      set ill? true
      set infectious? true
      set incubating? false
      set susceptible? false
      set illness-length random recovery-time ;; any time up to their recovery-time;; so the previous duration of their illness at start is variable
    ]
    assign-color
  ]
end


to put-into-bubbles
  ;; see document HOWMADEBUBBLES to explain logic of how bubbles assigned & located
  let rejoctile-means [0.154027 0.258309 0.315971 0.366495 0.41169 0.469809 0.532332 0.626891]  ; from Brotherton et al 2013 ;; needs to be set by meanREJ with corresponding sdREJ
  let rejoctile-stdvs  [0.05425 0.04211 0.030 0.026 0.026 0.036 0.042 0.100] ;; doubled stdDevs within each octile-> variance; result looks more normal
  let lower-who [0 199 399 599 799 999 1199 1399]
  let upper-who  [200 400 600 800 1000 1200 1400 1600]
  let bubble-uplevel 8 ;; loop 8 to 1
  while [bubble-uplevel > 0 ] [
  ask turtles with [who >= item (bubble-uplevel - 1 ) lower-who and who <= item (bubble-uplevel - 1 ) upper-who] [
    set reject-est random-normal item ( bubble-uplevel - 1) rejoctile-means item ( bubble-uplevel - 1) rejoctile-stdvs ;; set within this octile, entire octile, random-uniform better?
      set own-bubble-group ( bubble-uplevel * 10 ) ;; so these have had reject-est assigned this time
  ]
    let bubble-downlevel 8
  while [bubble-downlevel > 0] [ ;; start of creating little modules
    let midp-x random-xcor
    let midp-y random-ycor ;; this will be set by bubble
  ask n-of 25 turtles with [own-bubble-group = ( bubble-uplevel * 10 )] [ ;; cluster some (~26 doesn't break the code with 1700... related to initial-people)
    setxy ( midp-x + ( random 12 - random 12 ) ) ( midp-y + ( random 12 - random 12 )) ;; randomly around a mock centre, +/- 9 on avg; will this work??
    set own-bubble-group ( ( bubble-uplevel * 10 ) + bubble-downlevel ) ;; keep track which core cluster they were put in
    if reject-est > 1.0 [set reject-est 1.0] ; never observed outside upper bound
    if reject-est < 0 [
          set reject-est ( random-normal 0.05 0.02 ) ; reset to 0 or 0.001 leads to non smooth left hand side, this reassignment avoids negs, too
          if reject-est < 0 [set reject-est .001 ]] ;; end of checks for reject-est < 0
      ];; end of loop for creating little modules
  set bubble-downlevel bubble-downlevel - 1
] ;; finish of loop to create little modules within the bubble-level; will need a tidy up any stragglers at end; straggers will be in 10 times table!
  set bubble-uplevel bubble-uplevel - 1
] ;;  end of bubble-uplevel loop
  ;; assign to bubbleagentset = own-bubble-grp-agents + agents near in mindset + others not in mindset, aiming for Dunbar numbers
  ask turtles [ ;; everyone close + other likeminded + mix of like & not-likeminded
    ;;; print self
    if self = 1214 [inspect self ] ;; [[print self] of members-my-bubble]
      let intmybubble int ( own-bubble-group / 10 )
      set members-my-bubble (turtles in-radius 6.1) ;; near self, will tend to be similar to self
      let saferand1 (random-normal 80 20)
      let saferand2 (random-normal 40 10)
    if saferand1 < 0 [set saferand1 1]
    if saferand2 < 0 [set saferand2 1]
      set members-my-bubble (turtle-set members-my-bubble (n-of saferand1 turtles with [int ( own-bubble-group / 10 ) = intmybubble ] ) );; similar to self
      set members-my-bubble (turtle-set members-my-bubble (n-of saferand2 turtles with [int ( own-bubble-group / 10 ) != intmybubble ]) ) ;; not similar to self
    ] ;; checked 21.5.18, everyone has members of their bubble  show turtles with [nobody = members-my-bubble]
  ;; USEFUL
  ;; showed agentself doesn't include self show member? turtle 25 [members-my-bubble] of turtles with [who = 25]
  ;; ask turtles with [own-bubble-group = 15] [show members-my-bubble]
  ;; show member? turtle 1098 [members-my-bubble] of turtle 114
  ;; ask turtle-set [members-my-bubble] of turtle 114 [show self] ;; how to see which turtles are in an agentset (bubble)
  ;; show sort turtles with [own-bubble-group = 15]
  ;; show sort [members-my-bubble] of turtle 114
  ;; show reject-est of bubble around turtle 114: show [reject-est] of turtle-set [members-my-bubble] of turtle 114
  ;;
  ;;steps here to check how reciprocal bubble membership is, also to make bubbles more reciprocal in membership
  ;; how reciprocal are they
  ;; check-recip ;; comment this out when not needed, calcs recip & homophily variance of members in bubble, this slows setup down TEST CODE
  ask turtles [ set homexy (list xcor ycor)]; so they can return home at each bedtime
  end

to check-recip
  let list-re-vals [] ;; initialise this local array to empty
  let #numbr 0
  while [#numbr < initial-people] [
  ask turtle #numbr [ ;; check just one turtle to test how to make this work, then go to all ask turtles
    let #recip-nb-bubbles 0 ;; local counter for how many bubbles are reciprocal
    let #how-many-work-thru ( count members-my-bubble - 1 ) ;; how many in list  ... show count [members-my-bubble] of turtle 13
      ask members-my-bubble [ ;; asking members-my-bubble for turtle 13
        if member? turtle #numbr members-my-bubble [set #recip-nb-bubbles #recip-nb-bubbles + 1]] ;; is 13 reciprocated
      ;; set #how-many-work-thru ( #how-many-work-thru - 1 ) REDUNDANT
      set avg-recip #recip-nb-bubbles / #how-many-work-thru
      ;; print (word "turtle " who " has " #how-many-work-thru " in bubble, but recipnbbubbles is " #recip-nb-bubbles)
  ;; steps to make list of within bubble variance, will compare that to whole population variance
       ask members-my-bubble [set list-re-vals lput reject-est list-re-vals] ;; collecting reject-est of members-my-bubble
    ] ;; end of loop asking members-my-bubble questions

    set stdev-of-re-in-bubbles lput standard-deviation list-re-vals stdev-of-re-in-bubbles ;; need at least 2 items in list to calc stdev, put into list of within bubble stdevns
    set #numbr #numbr + 1
    set list-re-vals [] ;; reset local array to empty
  ]
end


;; Different people are displayed in different colors depending on health
;; White is neither infected nor cured (set at beginning), and <= mean% taking precautions
;; Blue is susceptible > mean% taking precautions (check interesting result)
;; Green is a cured person
;; Orange is incubating person
;; Red is an infected person
;; Magenta is infected, but takes precautions so unlikely to spread infec; pink is recovered but shedding

to assign-color  ;; turtle procedure
  if incubating? [ set color 26] ; light orange

  if ill? [
    ifelse take-precautions > mean-tp [set color 125] ; magenta... http://ccl.northwestern.edu/netlogo/docs/programming.html#colors
    [set color red] ];; not taking so many precautions

  if cured? [ set color green ]

  if susceptible? [
    ifelse take-precautions > mean-tp
    [set color 107] ; slight blue, susceptible but taking precautions
    [set color white]
  ];; not taking so many precautions

  if not ill? and infectious? [set color 136] ;; pink, the shedders post illness
end


;;; GO PROCEDURES
 to go
    ask turtles [ assign-color]

  if all? turtles [ not infectious? and not incubating?] ;; also need next line just when checking CRates
  ;; if ticks > 900 ;; when just checking CRates DONTFORGET
    [       ;; countcascs ;; routine to comment out in regular runs, counts how many cascades (B or G) were length = 1 each, and len > 5 (both); TEST CODE
            print "the end"
            stop ]

   ;; check-nb-contacts ;; don't run unless need to check, needs to be before nightskip in next block of code

;; put some code here about nighttime, so every 16 hours, everyone stops for 8 hrs, no new infecting, BUT ticks, illness-length incubation-length still increase
  if member? ticks bedtimes [ ;; starts of nighttime
    ask turtles [setxy item 0 homexy item 1 homexy]; everyone go home (for some reason, not seen in new places until outside this routine)
    ask turtles with [ incubating?] [ set incubation-length (incubation-length + 8 ) ]
    ;; always assume start outbreak was early morning (nominal 7am), but 11pm-7am:
    ;; don't move during this time, add 8 ticks, add 8 to illness-length & incubation-length for those who are either
  ask turtles with [ ill? ] [set illness-length (illness-length + 8)    ] ; end of turtle ops
  ;; error trap...show count turtles with [infected? and incubating?]
  tick-advance 8
  ] ;; end of night time



;; daytime steps below
  ask turtles
    [ move
      clear-count ]

   ask turtles with [ incubating? or ill? or infectious? ] ;; lose this while establish that CRate targets are met DONTFORGET
   [ infect
  ]
  let bloop count turtles with [ill?]
  if bloop > maxill [set maxill bloop] ;; resetting so can find the peak AR show count turtles with [ill?]
  ;; ] ;; end of daytime movements & infecting others

   ;; next step can loop for so many iterations (injections of info/hr)... loop is the command, means repeat until... while, or foreach or until or?? limit on how many times can share per tick?  Say 120?
  ;; also need to have the story get exhausted.... in reality, credibility might get dented, some stories can be revitalised
  ;; Vosoughi: It took the truth about six times as long as falsehood to reach 1500 people (so willshare for GA is 1/6 that of BA?)
  ;; Vosoughi: 70% more likely to share fake news... On average, the false stories reached about 35 percent more people (bubbles...!)
  ;; rewriting this code to loop thru so many new inputs per hour
  ;; loop starts here
  ;; slider will be #newadvice-per-hour try range... 110-160, by 1 increment; did have let #newadvice-per-hour 140 around here
  ;;reporter needs to be ticks & length cascade-b & length-cascade-g, cascade-sum-lengths should be 166/day ideally
  ;; then try repetitions of those within 15% of target = 166/day?  ;; question, how many times to expose?  Vousoughi: 126k stories => 4 miln tweets, of which ~13k were science+tech 2006-2017
  let #advice-per-hour #newadvice-per-hour ;; #newadvice is set by the slider
  while [#advice-per-hour > 0] [
  ask turtles [set already-shared 0] ;; not yet shared this cascade
  set willshare defaultwillshare ;; in theory, if BAis 4x as likely to be shared, gets total to 3% G, 12% B
  ask one-of turtles [ ;;
    ifelse  ( random 100 < pcBA ) [set advice 25] [set advice 75];; set if GA or BA 25 is bad & 75 is good advice, 50:50 ratio in stage 1-2, ITEM2VARY
    set cascade-length 0 ;; not yet started, so still 0
    set current-cascades []    ;; reset to start
    set advice-nb ticks
      if infoexposeyes? [ expose-to-advice ];; start of a possible cascade comment this out for stage 1 ;; COMMENT OUT WHILE TESTING FOR CONTACT RATES AND STAGE 1 PHASE,  TEST CODE
    if not empty? current-cascades [
      ifelse advice = 75 [ set cascade-g lput max current-cascades cascade-g]
        [set cascade-b lput max current-cascades cascade-b] ;; adding cascade length to list of cascade-lengths, so can make sure model performs as expected
      ;;;;print (word "cascade-b is " cascade-b "advice is " advice);; nb, cascade #226 is good one to watch
      ;;;;print (word "casade-g is " cascade-g "advice is " advice) ;; checking cascades behaving
        ;;;; show occurrences 7 ( sentence cascade-b cascade-g) ;; see how often cascade got to length 7, BA or GA
  ]]
  set #advice-per-hour #advice-per-hour - 1] ;; back to start of while loop

  calculate-r0 ;; key model performance metric
  ;; hourly tick now happens in calc-r0 routine...always changes at end, so is 0 thru first round, 1 thru 2nd round, etc.
end


;; People move about at random 1 unit.;; but the infected move less so there is a reduction in contact rate for this group (0.2)
to move
  rt random-float 360
  ifelse not ill? [fd 1] [fd 0.2]
end

to clear-count
  set nb-infected 0
  set nb-recovered 0
end

;; Infection can occur to any susceptible person nearby
to infect  ;; turtle procedure, only acts on the ill?, infected? or incubating?
  ; could add if statement here, to only apply to the infected? and not taking-precautions
  if ill? or infectious? [ maybe-recover]
  if incubating? [ ;; see if about to become infectious, 24 hrs before onset of illness
    set incubation-length (incubation-length + 1)
    if  incubation-length >=  time-to-incubate  [;; infectious/ill both commence at same time
      set incubating? false
      set nb-infected (nb-infected + 1)
      set ill? true
      set infectious? true]
    ]

   if infectious? [
    let nearby-turtles (turtles-on neighbors)
  with [ susceptible?]
     if nearby-turtles != nobody
     [ if  random-float 100 > ( 100 * take-precautions ) [  ;; does the infected person fail to take precautions this time
    ask nearby-turtles
       [ if random-float 100 > (100 * take-precautions ) ; does the potential infectee fail to take precautions this time
          [if ( random-float 100 ) + .001 < viralshedrisk
            [ set incubating? true
        set susceptible? false  ]
  ] ] ] ] ]
end

to maybe-recover ;; & start/stop shedding... can only get called to this routine if infectious or ill
  if ill? [set illness-length ( illness-length + 1 )
    if illness-length > recovery-time
  [
      set ill? false
      set nb-recovered (nb-recovered + 1)
  ]]

  ;; If people have been infected for more than their own recovery-time, they stop being ill, but may still be shedding
  if not ill? [ set shedding-len shedding-len + 1
  if shedding-len > random-normal 48 12 [ set infectious? false ;; random element to how long infectious after illness ceases
      set cured? true]] ;; don't count in cured? group until no more shedding
end


to calculate-r0
  let new-infected sum [ nb-infected ] of turtles
  let new-recovered sum [ nb-recovered ] of turtles ;;
  ;; Number of ill people at the previous tick:
  set nb-infected-previous
    count turtles with [ ill? ] +   new-recovered - new-infected

  ;; Number of susceptibles now:
  let susceptible-t count turtles with [ susceptible? ]

  ;; Initial number of susceptibles
  if ticks = 0 [  set s0 susceptible-t]

  ifelse nb-infected-previous < 1 ;; was < 10
  [ set beta-n 0 ]
  [
    ;; This is beta-n, the average number of new
    ;; secondary infections per infected per tick (code from EpiDem)
    set beta-n (new-infected / nb-infected-previous)
  ]

  ifelse nb-infected-previous < 10 ;; was < 10 (code from EpiDem, seems to make no difference!)
  [ set gamma 0 ]
  [
    ;; This is the average number of new recoveries per infected per tick
    set gamma (new-recovered / nb-infected-previous)
  ]

  ;; Prevent division by 0:
      ;; sometimes get neg #s out of next command, so should reset it to 0.01 in those cases (ie, very small); would like to fix this better; tests were != 0
  if initial-people - susceptible-t > 0 and susceptible-t > 0
  [
    ;; This is derived from integrating dI / dS = (beta*SI - gamma*I) / (-beta*SI):
    set r0 (ln (s0 / susceptible-t) / (initial-people - susceptible-t))
    ;; Assuming few infected individuals introduced in the beginning
    ;; counting I(0) as negligible, we get the relation:
    ;; N - gamma*ln(S(0)) / beta = S(t) - gamma*ln(S(t)) / beta,
    ;; where N is the initial 'susceptible' population
    ;; Since N >> 1
    ;; Using this, we have R_0 = beta*N / gamma = N*ln(S(0)/S(t)) / (K-S(t))
    set r0 r0 * s0 ]
  tick ;; daytime, nighttime ticks are elsewhere
end


to expose-to-advice
    let combinedexposed members-my-bubble ;; people will share to, within bubble
  ;; test if GA 75 or BA 25, recalc willshare dep. on GA/BA & exposure's willshare and whether 'immunised' against bad info
  ifelse advice = 25 [if not BAimmunised?
    [set take-precautions ( take-precautions - change-tp )]] ;; vary with reject-est?
     [set take-precautions ( take-precautions + change-tp )] ;; increase in TP can happen, just not decreases, for the immunised
  if take-precautions < 0 [set take-precautions 0]
  if take-precautions > 1 [set take-precautions 1]
  if (advice = 75) [set willshare defaultwillshare]
    if (advice = 25) [
      ifelse BAimmunised?
      [set willshare 0]
      [set willshare  (defaultwillshare * 4 ) * ( reject-est / (mean [reject-est] of turtles) )] ;; set so that higher reject-est more likely to share BA AQUI**
    ] ;; end of if BAimmunised? & if advice = 25
  set willshare ( willshare / ( 4 ^ already-shared ) )  ;; reduce somewhat chances of retweet dep. how many times already been shared
  set already-shared already-shared + 1
  ;; else default willshare value for GA, as set near start of this routine, goal is to make sure that BA is 4x as likely to be sharedon avg
  ;; so need to monitor willshare values, but them into a list to do that
     ;; 2x to 6x more likely to share false than true stories, following sources ITEM2VARY
  if advice = 25 [set willsharelistb lput willshare willsharelistb] ;; creating a list of willshare values, so can check their distrib for BA:GA injection ratios
     ;; willshareGA is always fixed value, but BA can vary, see willshareBA distribs & means;; odd results due to info-immunisation?
  if (random-float 100 ) / 100  < willshare  [ ;; do this block if this agent is going to definitely share; should not enter this section if BA and BAimmunised?
    ifelse advice = 25 [set countBwillshare countBwillshare + 1] ;;
        [set countGwillshare countGwillshare + 1] ;; else statement
    ;; if advice = 75 [print (word "share happened " countGwillshare  )]
    set cascade-length ( cascade-length + 1 )  ;; maximum depth for cascade is its length
        if cascade-length > 19 [ print (word "advice is " advice " and cascade length is " cascade-length )
                                 set cascade-length ( cascade-length - 1)
                                 print "stopping due to cascade-length" ;; most cascades about 1-3, max. = 19 per Vosoughi
    stop ]  ;; already shared up to Netlogo effective limits, no more
    ;; print (word who "is about to share to others ")
    ;;; wait 2
    ;;;; print (word "this is how many one person can try to expose " count combinedexposed " yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy")
    ask n-of ( 0.025 * count combinedexposed ) combinedexposed  [expose-to-advice] ;; expose small% of bubble... set so that get 85% cascades = 1, 2% >= 5
    ;;;; print (word who "finished sharing with others ?") ;; this is point to put recurs-counter into list of cascade lengths, divide by BA-Ga, and also reset recurs-counter -1
    set current-cascades lput cascade-length current-cascades
    set cascade-length ( cascade-length - 1) ;; going back up one level ... I hope this works right
    ;;;; print (word "advice# is " advice-nb ", and cascadefrags are " current-cascades );; see if that works on rumour #654, max should be 3
  ];; see results of last share]  END OF REVISE HEAVILY, HOW CASCADES WORK ETC
end


to-report quantile [the-quantile a-list]
  let index 0.5 + (length a-list) * the-quantile
  let sorted-list sort a-list
  let high-value item (ceiling index) sorted-list
  let low-value item (floor index) sorted-list
  report low-value
    + (high-value - low-value) * (index - int index)
end

to check-nb-contacts ; use this to make sure mean contacts/16 hrs stays around 11-13.4, and ideal range 7-20
    ;; test here to calc no. agents have contacted in any 24 hr period
  ask turtles [ set contacts-sofar ( turtle-set contacts-sofar turtles-on neighbors ) ]
  ;; useful query syntax... show [infection-length] of turtles with [cured?]
  ;;      print (word "mean inc periods is " mean [incubation-length] of turtles with [incubation-length > 0 and cured?] )
  ;;    print (word "assigned time to incubate mean is " mean [time-to-incubate] of turtles )
  ;; show [mean [ count contacts-sofar] ]... ask turtles with [who = 1447] [set color yellow]...  ask turtles with [who = 1441] [inspect self]
  ;; show count turtles with [infected? and incubating?]
  ;; ask turtles[show count contacts-sofar];; Mossong et al only counted unique individuals once, so their 11.7 is 11.7 other unique ppl (GB data)
  ;; print (word "in check-nb-cotacts routine, tick is ... " ticks )
  ;; GET SENSIBLE GENERATE NEXT LIST IN AN AUTOMATIC WAY, UP TO 2880 AT LEAST, THAT'S ABOUT 4MONTHS
  if member? ticks bedtimes [
    ;; show min [count contacts-sofar] of turtles
    ;; show quantile 0.05 [count contacts-sofar] of turtles ;; show mean [incubation-length] of turtles
    ;; print (word "24 hour avg contacts... " mean [count contacts-sofar] of turtles );; note this includes self in count, subtract 1 to compare to Mossong values
    set mn-contacts-sofar mean [count contacts-sofar] of turtles
    ;; could put last value into a list & check at end that it averages about 11.7, but std dev will still be low at ~4.7 (should be ~7)
    ;; show standard-deviation [count contacts-sofar] of turtles
    ask turtles [set contacts-sofar self]
]
end

;; count the number of occurrences of an item in a list
to-report occurrences [x the-list]
  report reduce
    [ [occurrence-count next-item] -> ifelse-value (next-item = x) [occurrence-count + 1] [occurrence-count] ] (fput 0 the-list)
end


to-report BSreportthings
  report mean [take-precautions] of turtles
end


to countcascs
  let maxBA max cascade-b
  let maxGA max cascade-g
  let lenBA length cascade-b
  let lenGA length cascade-g
  let BA1 occurrences 1 cascade-b
  let GA1 occurrences 1 cascade-g
  let BA5plus occurrences 5 cascade-b
  let GA5plus occurrences 5 cascade-g
  let countr 6
  while [countr <= maxBA][
  set BA5plus BA5plus + occurrences countr cascade-b
  set GA5plus GA5plus + occurrences countr cascade-g
    set countr countr + 1
  ]
  print "in this order lengthB maxB Bis1 B5+ lengthG Gis1 maxG G5+"
  print (word lenBA " " maxBA " " BA1 " " BA5plus " " lenGA " " maxGA " " GA1 " " GA5plus)
  print "next run"
        ;; print (word "count of BA shares is " countBwillshare)
      ;; print (word "count of GA shares is " countGwillshare)
end


;; See word-doc Norovirus Documentation for further explanation
; Started with NetLogo EpiDEM library model, Copyright 2011 Uri Wilensky with many modifications by JB
; See Info tab for full information (NEEDS UPDATING)